# DESCRIPTION: 	
# Tests deployment to Microsoft Azure Government

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:-r)
trigger: none

variables:
  ConnectedServiceName: 'mshapis-govtest-deploymentagent'
  ResourceGroupRegion: 'usgovvirginia'
  AppInsightsRegion: 'usgovvirginia'
  SqlRegion: 'usgoviowa'
  resourceGroupRoot: 'msh-fhir-ci'
  appServicePlanResourceGroup: '$(resourceGroupRoot)'
  appServicePlanName: '$(resourceGroupRoot)-asp'
  DeploymentEnvironmentName: '$(resourceGroupRoot)'
  DeploymentEnvironmentNameSql: '$(DeploymentEnvironmentName)-sql'
  DeploymentEnvironmentNameR4: '$(DeploymentEnvironmentName)-r4'
  DeploymentEnvironmentNameR4Sql: '$(DeploymentEnvironmentName)-r4-sql'
  DeploymentEnvironmentNameR5: '$(DeploymentEnvironmentName)-r5'
  DeploymentEnvironmentNameR5Sql: '$(DeploymentEnvironmentName)-r5-sql'
  TestEnvironmentUrl: 'https://$(DeploymentEnvironmentName).azurewebsites.net'
  TestEnvironmentUrl_Sql: 'https://$(DeploymentEnvironmentName)-sql.azurewebsites.net'
  TestEnvironmentUrl_R4: 'https://$(DeploymentEnvironmentName)-r4.azurewebsites.net'
  TestEnvironmentUrl_R4_Sql: 'https://$(DeploymentEnvironmentName)-r4-sql.azurewebsites.net'
  TestEnvironmentUrl_R5: 'https://$(DeploymentEnvironmentName)-r5.azurewebsites.net'
  TestEnvironmentUrl_R5_Sql: 'https://$(DeploymentEnvironmentName)-r5-sql.azurewebsites.net'
  TestClientUrl: 'https://$(DeploymentEnvironmentName)-client/'
  TestEnvironmentName: 'MAG OSS CI'

stages:
- stage: Deploy
  dependsOn: []
  jobs:
  - job: ProvisionEnvironment
    steps:
    - task: AzurePowerShell@4
      displayName: Provision Resource Group
      inputs:
        azureSubscription: $(ConnectedServiceName)
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          New-AzResourceGroup -Name "$(DeploymentEnvironmentName)" -Location "$(ResourceGroupRegion)" -Force
    - task: AzurePowerShell@4
      displayName: 'Deploy Default Site'
      inputs:
        azureSubscription: $(ConnectedServiceName)
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          $cors = (ConvertFrom-Json (Get-Content -Raw "*/**/corstestconfiguration.json"))
          $flattenedCors = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $cors
      
          $additionalProperties = $flattenedCors
      
          $additionalProperties["SqlServer:DeleteAllDataOnStartup"] = "true"

          $templateParameters = @{
              fhirVersion = "R4"
              appServicePlanName = "$(appServicePlanName)"
              serviceName = "$(DeploymentEnvironmentNameR4)"
              securityAuthenticationAudience = "$(TestEnvironmentUrl_R4)"
              additionalFhirServerConfigProperties = $additionalProperties 
              enableAadSmartOnFhirProxy = $false
              enableExport = $false
              applicationInsightsLocation = "$(AppInsightsRegion)"
          }

          New-AzResourceGroupDeployment -Name "$(DeploymentEnvironmentNameR4)" -ResourceGroupName "$(resourceGroupRoot)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose

          $templateParameters["solutionType"] = "FhirServerSqlServer"
          $templateParameters["serviceName"] = "$(DeploymentEnvironmentNameR4Sql)"
          $templateParameters["sqlLocation"] = "$(SqlRegion)"
          $templateParameters["securityAuthenticationAudience"] = "$(TestEnvironmentUrl_R4_SQL)"
          $templateParameters["sqlAdminPassword"] = "$(-join(((65..90) + (97..122) | Get-Random -Count 10) + ((39..46) | Get-Random -Count 1) + ((65..90) + (97..122) | Get-Random -Count 10) | % {[char]$_}))"
    
          # Deploy SQL Environment
          New-AzResourceGroupDeployment -Name "$(DeploymentEnvironmentNameR4Sql)" -ResourceGroupName "$(resourceGroupRoot)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-sql.json -TemplateParameterObject $templateParameters -Verbose
    - task: AzurePowerShell@4
      displayName: 'Delete resource group'
      inputs:
        azureSubscription: $(ConnectedServiceName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: 'Get-AzResourceGroup -Name $(DeploymentEnvironmentName) | Remove-AzResourceGroup -Verbose -Force'

